program        -> declaration* EOF ;

declaration    -> classDecl
                | funDecl
                | varDecl
                | statement ;

classDecl      -> "class" IDENTIFIER "{" function* "}" ;

funDecl        -> "fun" function ;

function       -> IDENTIFIER "(" parameters? ")" block ;

parameters     -> IDENTIFIER ( "," IDENTIFIER )* ;

varDecl        -> "var" IDENTIFIER ( "=" expression )? ( "," IDENTIFIER ( "=" expression )?)* ";" ;

statement      -> exprStmt
                | forStmt
                | ifStmt
                | printStmt
                | returnStmt
                | whileStmt
                | block ;

returnStmt     -> "return" expression? ";" ;

forStmt        -> "for" "(" ( varDecl | exprStmt | ";" )
                            expression? ";"
                            expression? ")" statement ;

whileStmt      -> "while" "(" expression ")" statement ;

ifStmt          | "if" "(" expression ")" statement ("else" statement)? ;

exprStmt       -> expression ";" ;

printStmt      -> "print" expression ";" ;

block          -> "{" declaration* "}" ;

expression     -> assignment ;

assignment     -> ( call "." )? IDENTIFIER "=" assignment
                | lambda ;

lambda         -> "lambda" "(" parameters? ")" ( expression | block )
		        | ternary ;

ternary        -> logic_or "?" ternary ":" ternary ;

logic_or       -> logic_and ( "or" logic_and )* ;

logic_and      -> equality ( "and" equality )* ;

equality       -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison     -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;

addition       -> multiplication ( ( "+" | "-") multiplication )* ;

multiplication -> unary ( ( "/" | "*" | "%" ) unary )* ;

unary          -> ( "!" | "-" ) unary
                | call ;

call           -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;

arguments      -> expression ( "," expression)* ;

primary        -> NUMBER | STRING
                | "false" | "true" | "nil" | "this"
                | "(" expression ")"
                | IDENTIFIER ;
